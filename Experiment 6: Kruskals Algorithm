#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define INF 9999

typedef struct{
	int u, v, w;
} Edge;


int find(int parent[], int i){
	if(parent[i] != i)
		parent[i] = find(parent, parent[i]);
	return parent[i];
}

void union1(int parent[], int rank[], int x, int y){
	int xroot = find(parent,x);
	int yroot = find(parent,y);
	if (rank[xroot] < rank[yroot])
		parent[xroot] = yroot;
	else if (rank[xroot] > rank[yroot])
		parent[yroot] = xroot;
	else{
		parent[yroot] = xroot;
		rank[xroot]++;
	}
}

void kruskalMST(int **cost, int V){

	Edge edges[V * V];
	int k = 0;

	for(int i=0; i<V; i++){
		for (int j = i+1; j<V; j++){
			if (cost[i][j] !=INF){
				edges[k].u = i;
				edges[k].v = j;
				edges[k].w = cost[i][j];
				k++;
			}
		}
}

	for (int i = 0; i < k - 1; i++){
		for (int j = 0; j < k - i - 1; j++){
			if (edges[j].w > edges[j + 1].w){
				Edge temp = edges[j];
				edges[j] = edges[j + 1];
				edges[j + 1] = temp;
			}
		}
	}

	int parent[V], rank[V];
	for (int i = 0; i < V; i++){
		parent[i] = i;
		rank[i] = 0;
	}

	int edgeCount = 0, totalCost = 0;

	for(int i = 0; i < k && edgeCount < V - 1; i++){
		int u = edges[i].u;
		int v = edges[i].v;
		int w = edges[i].w;

		int setU = find(parent, u);
		int setV = find(parent, v);

		if(setU != setV){
			printf("Edge %d:(%d, %d) cost:%d\n", edgeCount, u, v, w);
			totalCost += w;
			union1(parent, rank, setU, setV);
			edgeCount++;
		}
	}

	printf("Minimum cost= %d\n", totalCost);
}


int main() {
    int V;
    printf("No of vertices: ");
    scanf("%d", &V);

    int **cost = (int **)malloc(V * sizeof(int *));
    for (int i = 0; i < V; i++)
        cost[i] = (int *)malloc(V * sizeof(int));

    printf("Adjacency matrix:\n");
    for (int i = 0; i < V; i++)
        for (int j = 0; j < V; j++)
            scanf("%d", &cost[i][j]);

    kruskalMST(cost, V);

    for (int i = 0; i < V; i++)
        free(cost[i]);
    free(cost);

    return 0;
}
